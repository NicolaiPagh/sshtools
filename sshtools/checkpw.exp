#!/usr/bin/expect

global prompt
set timeout 10
set prompt "#"
lassign $argv host

proc getScriptDirectory {} {
    set dispScriptFile [file normalize [info script]]
    set scriptFolder [file dirname $dispScriptFile]
    return $scriptFolder
}

set scriptDir [getScriptDirectory]

#make sure user and password is written in file ./up seperated by newline, with user on first line and password on the second.
#gets user and password from ./up file
set up [open $scriptDir/up]
gets $up user
gets $up password

set result 3

log_user 0

proc sshConnect {user password host} {
	global prompt
	global spawn_id
	spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$host
		expect {
			"Connection refused" {
				send_user "SSH Connection refused. SSH most likely not enabled on the device\n"
				return 1
			}
			"assword:" {
				send "$password\r"
				exp_continue
			}
			"$prompt" {
				return 0
				send_user "Succesfully connecte to device via SSH\n"
			}
			default {
				send_user "SSH login failed for unknown reasons\n"
				return 1
				}
			}
}

proc telnetConnect {user password host} {
	global prompt
	global spawn_id
	spawn telnet $host
		expect {
			"Connection refused" {
				send_user "Telnet Connection refused. telnet most likely not enabled on the device\n"
				return 1
            }
			"sername:" {
				send "$user\r"
				exp_continue
			}
			"assword:" {
				send "$password\r"
				exp_continue
			}
			"$prompt" {
				send_user "Successfully connected to device via telnet\n"
				return 0
			}
			default {
				send_user "Telnet login failed for unknown reasons\n"
				return 1
			}
		}
}

set result [sshConnect $user $password $host]
if { $result ne "0" } {
	set result [telnetConnect $user $password $host]
	if { $result ne "0" } {
		puts "Both SSH and Telnet login failed, maybe host is down?"
		exit
	}
#	if { $result eq "0" } {
#		stty -echo
#		send_user "\n"
#		send_user "Succesfully connected via telnet, want to attempt to add SSH config automatically?(y/n): "
#		interact y {return} n {return}
#		expect_user -re "(.*)\n"
#		send_user "\n"
#		stty echo
#		set userinput $expect_out(1,string)
#		puts "$userinput"
#	}
}


send "\r"
expect "$prompt"
send {sh ver | i ^[S]ystem|uptime}
log_user 1
send_user "\n"
send "\r"
expect "$prompt"
send_user "\n"
send "exit"
puts "\r"
